/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TexasPoker;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test
    void Init() {
        boolean flag = false;
        TexasPoker poker = new TexasPoker();
        Poker textPoker = new Poker();
        poker.init("2H 3D 5S 9C KD",textPoker);
        Poker exceptedPoker = new Poker();
        exceptedPoker.number = new int[]{2,3,5,9,13};
        exceptedPoker.color = new String[]{"H","D","S","C","D"};
        if(Arrays.equals(exceptedPoker.number,textPoker.number) && Arrays.equals(exceptedPoker.color,textPoker.color))
            flag = true;
        Assertions.assertEquals(true, flag);
    }

    @Test
    void sort(){
        boolean flag = false;
        TexasPoker poker = new TexasPoker();
        Poker textPoker = new Poker();
        textPoker.number = new int[]{5,9,2,14,6};
        poker.sort(textPoker);
        Poker exceptedPoker = new Poker();
        exceptedPoker.number = new int[]{2,5,6,9,14};
        if(Arrays.equals(exceptedPoker.number,textPoker.number))
            flag = true;
        Assertions.assertEquals(true, flag);
    }

    @Test
    void classificationStraightFlush() {
        boolean flag = false;
        TexasPoker poker = new TexasPoker();
        Poker textPoker = new Poker();
        textPoker.number = new int[]{3,4,5,6,7};
        textPoker.color = new String[]{"H","H","H","H","H"};
        String result = poker.classification(textPoker);
        String exceptedResult = new String("同花顺");
        int level = 7;
        int keyPoker = 7;
        if( textPoker.level == level && textPoker.keyPoker == keyPoker && result.equals(exceptedResult))
            flag = true;
        Assertions.assertEquals(true, flag);
    }

    @Test
    void classificationFlush() {
        boolean flag = false;
        TexasPoker poker = new TexasPoker();
        Poker textPoker = new Poker();
        textPoker.number = new int[]{3,5,5,6,7};
        textPoker.color = new String[]{"H","H","H","H","H"};
        String result = poker.classification(textPoker);
        String exceptedResult = new String("同花");
        int level = 6;
        int keyPoker = 7;
        if( textPoker.level == level && textPoker.keyPoker == keyPoker && result.equals(exceptedResult))
            flag = true;
        Assertions.assertEquals(true, flag);
    }

    @Test
    void classificationStraight() {
        boolean flag = false;
        TexasPoker poker = new TexasPoker();
        Poker textPoker = new Poker();
        textPoker.number = new int[]{3,4,5,6,7};
        textPoker.color = new String[]{"H","S","H","C","H"};
        String result = poker.classification(textPoker);
        String exceptedResult = new String("顺子");
        int level = 5;
        int keyPoker = 7;
        if( textPoker.level == level && textPoker.keyPoker == keyPoker && result.equals(exceptedResult))
            flag = true;
        Assertions.assertEquals(true, flag);
    }

    @Test
    void classificationThreeKind() {
        boolean flag = false;
        TexasPoker poker = new TexasPoker();
        Poker textPoker = new Poker();
        textPoker.number = new int[]{3,5,5,5,7};
        textPoker.color = new String[]{"H","C","D","S","H"};
        String result = poker.classification(textPoker);
        String exceptedResult = new String("三条");
        int level = 4;
        int keyPoker = 5;
        if( textPoker.level == level && textPoker.keyPoker == keyPoker && result.equals(exceptedResult))
            flag = true;
        Assertions.assertEquals(true, flag);
    }

    @Test
    void classificationTwoPair() {
        boolean flag = false;
        TexasPoker poker = new TexasPoker();
        Poker textPoker = new Poker();
        textPoker.number = new int[]{3,3,5,5,7};
        textPoker.color = new String[]{"H","C","D","S","H"};
        String result = poker.classification(textPoker);
        String exceptedResult = new String("两对");
        int level = 3;
        int keyPoker = 5;
        if( textPoker.level == level && textPoker.keyPoker == keyPoker && result.equals(exceptedResult))
            flag = true;
        Assertions.assertEquals(true, flag);
    }

    @Test
    void classificationPair() {
        boolean flag = false;
        TexasPoker poker = new TexasPoker();
        Poker textPoker = new Poker();
        textPoker.number = new int[]{3,4,5,5,7};
        textPoker.color = new String[]{"H","C","D","S","H"};
        String result = poker.classification(textPoker);
        String exceptedResult = new String("对子");
        int level = 2;
        int keyPoker = 5;
        if( textPoker.level == level && textPoker.keyPoker == keyPoker && result.equals(exceptedResult))
            flag = true;
        Assertions.assertEquals(true, flag);
    }

    @Test
    void classificationHighCard() {
        boolean flag = false;
        TexasPoker poker = new TexasPoker();
        Poker textPoker = new Poker();
        textPoker.number = new int[]{2,3,5,9,13};
        textPoker.color = new String[]{"H","D","S","C","D"};
        String result = poker.classification(textPoker);
        String exceptedResult = new String("散牌");
        int level = 1;
        int keyPoker = 13;
        if( textPoker.level == level && textPoker.keyPoker == keyPoker && result.equals(exceptedResult))
            flag = true;
        Assertions.assertEquals(true, flag);
    }

    @Test
    void comparePokerTest1(){
        String black = "2H 3D 5S 9C KD";
        String white = "2C 3H 4S 8C AH";
        TexasPoker texasPoker = new TexasPoker();
        Poker blackpoker = new Poker();
        texasPoker.init(black,blackpoker);
        texasPoker.sort(blackpoker);
        texasPoker.classification(blackpoker);

        Poker whitepoker = new Poker();
        texasPoker.init(white,whitepoker);
        texasPoker.sort(whitepoker);
        texasPoker.classification(whitepoker);

        String result = texasPoker.comparePoker(blackpoker,whitepoker);
        Assertions.assertEquals("White wins", result);
    }

    @Test
    void comparePokerTest2(){
        String black = "2H 4S 4C 2D 4H";
        String white = "2S 8S AS QS 3S";
        TexasPoker texasPoker = new TexasPoker();
        Poker blackpoker = new Poker();
        texasPoker.init(black,blackpoker);
        texasPoker.sort(blackpoker);
        texasPoker.classification(blackpoker);

        Poker whitepoker = new Poker();
        texasPoker.init(white,whitepoker);
        texasPoker.sort(whitepoker);
        texasPoker.classification(whitepoker);

        String result = texasPoker.comparePoker(blackpoker,whitepoker);
        Assertions.assertEquals("White wins", result);
    }

    @Test
    void comparePokerTest3(){
        String black = "2H 3H 5H 9H KH";
        String white = "2C 3H 4S 5C 6H";
        TexasPoker texasPoker = new TexasPoker();
        Poker blackpoker = new Poker();
        texasPoker.init(black,blackpoker);
        texasPoker.sort(blackpoker);
        texasPoker.classification(blackpoker);

        Poker whitepoker = new Poker();
        texasPoker.init(white,whitepoker);
        texasPoker.sort(whitepoker);
        texasPoker.classification(whitepoker);

        String result = texasPoker.comparePoker(blackpoker,whitepoker);
        Assertions.assertEquals("Black wins", result);
    }

    @Test
    void comparePokerTest4(){
        String black = "2H 3D 5S 9C KD";
        String white = "2D 3H 5C 9S KH";
        TexasPoker texasPoker = new TexasPoker();
        Poker blackpoker = new Poker();
        texasPoker.init(black,blackpoker);
        texasPoker.sort(blackpoker);
        texasPoker.classification(blackpoker);

        Poker whitepoker = new Poker();
        texasPoker.init(white,whitepoker);
        texasPoker.sort(whitepoker);
        texasPoker.classification(whitepoker);

        String result = texasPoker.comparePoker(blackpoker,whitepoker);
        Assertions.assertEquals("Tie", result);
    }
    }
